content_assist_disabled_computers=org.eclipse.jdt.ui.textProposalCategory\u0000org.eclipse.recommenders.calls.rcp.proposalCategory.templates\u0000org.eclipse.mylyn.java.ui.javaAllProposalCategory\u0000org.eclipse.jdt.ui.javaAllProposalCategory\u0000org.eclipse.jdt.ui.javaTypeProposalCategory\u0000org.eclipse.jdt.ui.javaNoTypeProposalCategory\u0000org.eclipse.recommenders.chain.rcp.proposalCategory.chain\u0000
content_assist_lru_history=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><history maxLHS\="100" maxRHS\="10"><lhs name\="java.util.Map"><rhs name\="java.util.Hashtable"/><rhs name\="java.util.HashMap"/><rhs name\="java.util.TreeMap"/></lhs><lhs name\="java.lang.Cloneable"><rhs name\="java.util.Hashtable"/><rhs name\="java.util.HashMap"/><rhs name\="java.util.TreeMap"/><rhs name\="java.util.HashSet"/><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.util.Dictionary"><rhs name\="java.util.Hashtable"/></lhs><lhs name\="java.util.Hashtable"><rhs name\="java.util.Hashtable"/></lhs><lhs name\="java.util.Set"><rhs name\="java.util.HashSet"/></lhs><lhs name\="java.util.Collection"><rhs name\="java.util.HashSet"/><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.lang.Iterable"><rhs name\="java.util.HashSet"/><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.util.AbstractSet"><rhs name\="java.util.HashSet"/></lhs><lhs name\="java.util.AbstractCollection"><rhs name\="java.util.HashSet"/><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.util.HashSet"><rhs name\="java.util.HashSet"/></lhs><lhs name\="java.lang.Number"><rhs name\="java.lang.Integer"/><rhs name\="java.lang.Float"/><rhs name\="java.lang.Long"/><rhs name\="java.math.BigInteger"/></lhs><lhs name\="java.util.AbstractMap"><rhs name\="java.util.HashMap"/><rhs name\="java.util.TreeMap"/></lhs><lhs name\="java.util.HashMap"><rhs name\="java.util.HashMap"/></lhs><lhs name\="java.lang.CharSequence"><rhs name\="java.lang.StringBuffer"/><rhs name\="java.lang.StringBuilder"/></lhs><lhs name\="java.lang.AbstractStringBuilder"><rhs name\="java.lang.StringBuffer"/><rhs name\="java.lang.StringBuilder"/></lhs><lhs name\="java.lang.Appendable"><rhs name\="java.lang.StringBuffer"/><rhs name\="java.io.PrintWriter"/><rhs name\="java.io.OutputStreamWriter"/><rhs name\="java.lang.StringBuilder"/></lhs><lhs name\="java.util.List"><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.util.RandomAccess"><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.util.AbstractList"><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.util.ArrayList"><rhs name\="java.util.ArrayList"/></lhs><lhs name\="java.io.Reader"><rhs name\="java.io.BufferedReader"/><rhs name\="java.io.InputStreamReader"/></lhs><lhs name\="java.lang.Readable"><rhs name\="java.io.BufferedReader"/><rhs name\="java.io.InputStreamReader"/></lhs><lhs name\="java.io.Closeable"><rhs name\="java.io.BufferedReader"/><rhs name\="java.io.InputStreamReader"/><rhs name\="java.io.PrintWriter"/><rhs name\="java.io.OutputStreamWriter"/></lhs><lhs name\="java.lang.AutoCloseable"><rhs name\="java.io.BufferedReader"/><rhs name\="java.io.InputStreamReader"/><rhs name\="java.io.PrintWriter"/><rhs name\="java.io.OutputStreamWriter"/></lhs><lhs name\="java.io.BufferedReader"><rhs name\="java.io.BufferedReader"/></lhs><lhs name\="java.io.Writer"><rhs name\="java.io.PrintWriter"/><rhs name\="java.io.OutputStreamWriter"/></lhs><lhs name\="java.io.Flushable"><rhs name\="java.io.PrintWriter"/><rhs name\="java.io.OutputStreamWriter"/></lhs><lhs name\="java.io.PrintWriter"><rhs name\="java.io.PrintWriter"/></lhs><lhs name\="java.math.BigInteger"><rhs name\="java.math.BigInteger"/></lhs><lhs name\="java.util.NavigableMap"><rhs name\="java.util.TreeMap"/></lhs><lhs name\="java.util.SortedMap"><rhs name\="java.util.TreeMap"/></lhs><lhs name\="java.util.TreeMap"><rhs name\="java.util.TreeMap"/></lhs></history>
content_assist_number_of_computers=19
content_assist_proposals_background=255,255,255
content_assist_proposals_foreground=60,60,60
eclipse.preferences.version=1
fontPropagated=true
org.eclipse.jdt.ui.editor.tab.width=
org.eclipse.jdt.ui.formatterprofiles.version=12
org.eclipse.jdt.ui.javadoc=false
org.eclipse.jdt.ui.javadoclocations.migrated=true
org.eclipse.jdt.ui.text.code_templates_migrated=true
org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="false" context\="classbody_context" deleted\="false" description\="Code in new class type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.classbody" name\="classbody">static BufferedReader br \= new BufferedReader(new InputStreamReader(System.in));\n\tstatic PrintWriter pw \= new PrintWriter(new OutputStreamWriter(System.out));\n\tstatic PrintWriter outputFile;\n\tstatic StringBuilder output \= new StringBuilder("");\n\n\t// 0-D\n\tprivate static int readInt() throws NumberFormatException, IOException {\n\t\treturn Integer.parseInt(br.readLine().trim());\n\t}\n\n\tprivate static long readLong() throws NumberFormatException, IOException {\n\t\treturn Long.parseLong(br.readLine().trim());\n\t}\n\n\tprivate static String readStr() throws NumberFormatException, IOException {\n\t\treturn br.readLine().trim();\n\t}\n\n\tprivate static float readFloat() throws NumberFormatException, IOException {\n\t\treturn Float.parseFloat(br.readLine().trim());\n\t}\n\n\tprivate static double readDouble() throws NumberFormatException, IOException {\n\t\treturn Double.parseDouble(br.readLine().trim());\n\t}\n\n\tprivate static char readChar() throws NumberFormatException, IOException {\n\t\treturn br.readLine().trim().charAt(0);\n\t}\n\n\t// 1-D\n\tprivate static String[] readStrArr() throws NumberFormatException, IOException {\n\t\treturn br.readLine().trim().split(" ");\n\t}\n\n\tprivate static int[] readIntArr() throws NumberFormatException, IOException {\n\t\tString[] sarr \= readStrArr();\n\t\tint arr[] \= new int[sarr.length];\n\t\tint i \= 0;\n\t\tfor (String str \: sarr)\n\t\t\tarr[i++] \= Integer.parseInt(str.trim());\n\t\treturn arr;\n\t}\n\n\tprivate static long[] readLongArr() throws NumberFormatException, IOException {\n\t\tString[] sarr \= readStrArr();\n\t\tlong arr[] \= new long[sarr.length];\n\t\tint i \= 0;\n\t\tfor (String str \: sarr)\n\t\t\tarr[i++] \= Long.parseLong(str.trim());\n\t\treturn arr;\n\t}\n\n\tprivate static float[] readFloatArr() throws NumberFormatException, IOException {\n\t\tString[] sarr \= readStrArr();\n\t\tfloat arr[] \= new float[sarr.length];\n\t\tint i \= 0;\n\t\tfor (String str \: sarr)\n\t\t\tarr[i++] \= Float.parseFloat(str.trim());\n\t\treturn arr;\n\t}\n\n\tprivate static double[] readDoubleArr() throws NumberFormatException, IOException {\n\t\tString[] sarr \= readStrArr();\n\t\tdouble arr[] \= new double[sarr.length];\n\t\tint i \= 0;\n\t\tfor (String str \: sarr)\n\t\t\tarr[i++] \= Double.parseDouble(str.trim());\n\t\treturn arr;\n\t}\n\n\t// 2-D\n\tprivate static String[][] readStrMatrix(int n, int m) throws NumberFormatException, IOException {\n\t\tString str[][] \= new String[n][m];\n\t\tint _n \= n, i \= 0;\n\t\twhile (_n-- &gt; 0) {\n\t\t\tstr[i++] \= br.readLine().trim().split(" ");\n\t\t}\n\t\treturn str;\n\t}\n\n\tprivate static int[][] readIntMatrix(int n, int m) throws NumberFormatException, IOException {\n\t\tint arr[][] \= new int[n][m];\n\t\tfor (int i \= 0; i &lt; n; i++) {\n\t\t\tarr[i] \= readIntArr();\n\t\t}\n\t\treturn arr;\n\t}\n\n\tprivate static long[][] readLongMatrix(int n, int m) throws NumberFormatException, IOException {\n\t\tlong arr[][] \= new long[n][m];\n\t\tfor (int i \= 0; i &lt; n; i++) {\n\t\t\tarr[i] \= readLongArr();\n\t\t}\n\t\treturn arr;\n\t}\n\n\tprivate static float[][] readFloatMatrix(int n, int m) throws NumberFormatException, IOException {\n\t\tfloat arr[][] \= new float[n][m];\n\t\tfor (int i \= 0; i &lt; n; i++) {\n\t\t\tarr[i] \= readFloatArr();\n\t\t}\n\t\treturn arr;\n\t}\n\n\tprivate static double[][] readDoubleMatrix(int n, int m) throws NumberFormatException, IOException {\n\t\tdouble arr[][] \= new double[n][m];\n\t\tfor (int i \= 0; i &lt; n; i++) {\n\t\t\tarr[i] \= readDoubleArr();\n\t\t}\n\t\treturn arr;\n\t}\n\n\t// OUTPUT\n\t// save output in a file\n\tpublic static void outputFile() throws FileNotFoundException {\n\t\t// path of output file /home/binjarapu/Desktop/CodeOutputs\n\t\toutputFile \= new PrintWriter(new FileOutputStream(new File("/home/binjarapu/Desktop/CodeOutputs/output.txt")));\n\t\toutputFile.println(output);\n\t\toutputFile.flush();\n\t\toutputFile.close();\n\t}\n\n\t// show console output\n\tpublic static void outputConsole() throws FileNotFoundException {\n\t\tpw.print(output);\n\t\tpw.flush();\n\t\tpw.close();\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tsolve();\n\t}\n\n\t// CodeJam format pw.println("Case \#" + test + "\:");\n\t// append output with output globale variable\n\tprivate static void solve() throws Exception {\n\n\t\tint t \= readInt();\n\t\tfor (int test \= 1; test &lt;\= t; test++) {\n\t\t\toutput.append(test + "\\n");\n\t\t}\n\t\toutputConsole();\n\t\t// outputFile();\n\t}</template></templates>
org.eclipse.jdt.ui.text.custom_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates/>
org.eclipse.jdt.ui.text.templates_migrated=true
org.eclipse.jface.textfont=1|Monospace|10.0|0|GTK|1|;
proposalOrderMigrated=true
spelling_locale_initialized=true
tabWidthPropagated=true
useAnnotationsPrefPage=true
useQuickDiffPrefPage=true
