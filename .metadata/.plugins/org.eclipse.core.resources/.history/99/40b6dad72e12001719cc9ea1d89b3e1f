import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.LinkedList;


public class Graph_BFS {
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));

		int t = Integer.parseInt(br.readLine().trim());
		while (t-- > 0) {
			String str[] = br.readLine().trim().split(" ");
			//code

			pw.println();
		}

		pw.flush();
		pw.close();
	}
}

class Graph{
	int V;
	//Graph contains vertices from 1 to n
	LinkedList [] Graph;
	Graph(int vertices){
		//initializing graph with '# of vertices V'
		this.V=vertices;
		Graph = new LinkedList[vertices+1];
		//Graph contains vertices from 1 to n
		for(int i=1;i<=vertices;i++){
			Graph[i]=new LinkedList<>();
		}
	}
	
	public void addEdge(int source,int destination){
		//Graph contains vertices from 1 to n
		Graph[source].add(destination);
	}
	
	public void BFS(int source){
		
		boolean visited[] =new boolean[V+1];
		visited[source]=true;
		LinkedList<Integer> Queue = new LinkedList<Integer>();
		Queue.add(source);
		while(Queue!=null){
			int current = Queue.poll();
			System.out.println(current);
			
		}
	}
	
}
