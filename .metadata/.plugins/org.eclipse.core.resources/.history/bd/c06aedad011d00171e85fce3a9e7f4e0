import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;


class CLIQUED {
	static int V=0;
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));

		int t = Integer.parseInt(br.readLine().trim());
		while (t-- > 0) {
			String str[] = br.readLine().trim().split(" ");
			//code
			int n=Integer.parseInt(str[0].trim()),k=Integer.parseInt(str[1].trim()),x=Integer.parseInt(str[2].trim()),m=Integer.parseInt(str[3].trim()),s=Integer.parseInt(str[4].trim())-1;
			
			//int graph [] [] = new int[n+1][n+1];
			V=n;
			/*
			//older roads --generate
			for(int i=0;i<k;i++)
				for(int j=i;j<k;j++)
					if(i==j)
						graph[i][j]=0;
					else{
						graph[i][j]=x;
						graph[j][i]=x;
					}
			*/
			//newer roads --input
			Dijkstra dij=new Dijkstra(n,k,x);
			int _m=m;
			while(_m-->0){
				str = br.readLine().trim().split(" ");
				int a=Integer.parseInt(str[0].trim())-1;
				int b=Integer.parseInt(str[1].trim())-1;
				int c=Integer.parseInt(str[2].trim());
				dij.addEdge(a, b, c);
				//dij.addEdge(b, a, c);
				//graph[a][b]=c;
				//graph[b][a]=c;
			}
			// print
			dij.shortestPath(s);
		}

		pw.flush();
		pw.close();
	}
}
class Dijkstra{
	LinkedList graph[];
	Hashtable<String,Integer>weight;
	int size;
	int K,weightK;
	Dijkstra(int n,int k,int x){
		//n is number of nodes, and node naming is starts from 0 to n-1
		size=n;
		K=k;
		weightK=x;
		graph=new LinkedList[size];
		weight=new Hashtable<String,Integer>();
	
		for(int i=0;i<size;i++){
			graph[i]=new LinkedList<Integer>();
		}
	}
	
	public void addEdge(int source,int destination,int edgeWeight){ 
		//edge with weight
		graph[source].add(destination);
		StringBuffer sb=new StringBuffer(source);
		sb.append("-");
		sb.append(destination);
		weight.put(sb.toString(),edgeWeight);
		weight.put(source+"-"+destination,edgeWeight);
		// weight.put(source+"-"+destination,edgeWeight);
		// weight.put(destination+"-"+source,edgeWeight);
	}
	
	public void shortestPath(int source){
		
		//step1 
		//Create sptSet of graph size and initialize with inf
		long sptSet[]=new long[size];
		if(source<K)
		for(int i=0;i<K;i++)
			sptSet[i]=weightK;
		else
			for(int i=0;i<K;i++)
				sptSet[i]=Long.MAX_VALUE;
		for(int i=K;i<size;i++)
			sptSet[i]=Long.MAX_VALUE;
		
		//step2
		//make source shortest path is 0, from inf..Why because from source to source distance should be 0
		sptSet[source]=0;
		
		HashSet<Integer> sptSetFlag = new HashSet<>();//to check 
		sptSetFlag.add(source);
		
		while(sptSetFlag.size()!=size-1){
			
			//update vertices by fetching adjacent vertices weight set[u]+w[u,v]=set[v] if set[u]+w[u,v]<set[v]
			Iterator<Integer> adjNodes = graph[source].iterator();
			while(adjNodes.hasNext()){
				int tempDest=adjNodes.next();
				if(!sptSetFlag.contains(tempDest)){
					if(sptSet[source]+weight.get(source+"-"+tempDest)<sptSet[tempDest]){
						sptSet[tempDest]=sptSet[source]+weight.get(source+"-"+tempDest);
					}
				}
			}
			//Optimization required
			//extract non visited min node index
			long minNodeValue=Long.MAX_VALUE;
			int minNode=-1;
			for(int i=0;i<size;i++){
				//extract non visited min node index
				if(!sptSetFlag.contains(i)&&minNodeValue>sptSet[i]){
					minNodeValue=sptSet[i];
					minNode=i;
				}
			}
			if(minNode!=-1)
			{
				sptSetFlag.add(minNode);
				source=minNode;
			}
			
		}
		long minValue=Long.MAX_VALUE;
		for(int i=0;i<K;i++)
			if(minValue>sptSet[i])
				minValue=sptSet[i];
		for(int i=0;i<K;i++){
			if(sptSet[i]>=Long.MAX_VALUE-100){
				sptSet[i]=minValue+weightK;
			}
			System.out.print(sptSet[i]+" ");
		}
		for(int i=K;i<sptSet.length;i++){
			System.out.print(sptSet[i]+" ");
		}
		System.out.println();
		//System.out.println(Arrays.toString(sptSet));
	}
}